# def 함수명 (매개변수)
#     실행문1
#     실행문2
#     return 결과값
# 함수명(인수)

# 함수의 입력값이 없는 경우
# def return_A():
# return"A"
#
# print(return_A())

# 함수의 반환값이 없는 경우
# def print_string(string:str):
#     print(string)
#
# print(print_string("Hello"))

# 입력값, 반환값 둘 다 없는 경우

# def what_time_is_in_now():
#     import datetime
#     print(str(datetime.datetime.now())[:16])
#
# what_time_is_in_now()

# 매개번수의 개수가 몇 개가 필요할지 모를 경우
# def sum_nums(*args):
#     total = 0
#     for num in args:
#         total += num
#     return total
#
# print(sum_nums(1,2,3,4,5,6,7,8,9))# 출력값=>45

# 여러개의 문자열을 입력받아 하나의 문자열로 반환하는 sum_strings 함수를 구현하시요.
# print(sum_strings("Hello" , 'Everyone', "My","name","is","shinchanhee"))
# 출력값 => "Hello My name is shinchanhee"
# def sum_strings(*name):
#     full_string = ''
#     for i in name:
#         full_string += i
#         full_string += ' '
#     return full_string
# print(sum_strings("Hello", "Everyone", "My", "name", "is", "shinchanhee"))

# 입력한 인수를 딕셔너리 형태로 사용하고 싶을 때
# def print_dict(**kwargs):
#     print(kwargs)
#
# print_dict(A = 1, B = 2)

# 내 이름과 나이, 직업을 출력하는 introduce_myself라는 이름의 함수를 작성해 보자.
# 출력형태: 제 이름은 ???이고 나이는??살이며 직업은???입니다.
# def introduce_myself(name,age,job):
#     print(f"제 이름은 {name}이고, 나이는 {age}살이며, 직업은 {job}입니다.")
#
# name = "신찬희"
# age = "14"
# job = "학생"
# introduce_myself(name,age,job)

# 함수의 리턴 값은 하나이다.
# def Fourcal(num1,num2):
#     return num1 + num2, num1 - num2, num1 * num2, num1 / num2
#
# print(Fourcal(3,4)))

# a = 3                #전역변수 a(어느 순간에서도 참조 가능)
# def function():
#     a = 2            #지역변수 a
#     print(a)         #출력값 => 2 가장 가까운 변수인 지역병수인 a의 값을 출력
#
#
# function()
# print(a) #출력값 => 3 함수가 종료되없으므로 지역변수a가 아닌 전역변수 a를 참조

# a = 3
# def function():
#     global a
#     a = 2
#     print(a)
# function()
# print(a)

# 키패드 누르기
# def solution(number, hand):
#     answer = ''
#     coord = [(0, -2), (-1, 1), (0, 1), (1, 1), (-1, 0), (0, 0), (1, 0), (-1, -1), (0, -1), (1, -1)]
#     l = (-1, -2)
#     r = (1, -2)
#     for n in number:
#         if n in [1,4,7]:
#             answer += 'L'
#             l = coord[n]
#         elif n in [3, 6, 9]:
#             answer += 'R' 
#             r = coord[n]
#         else:
#             ld = abs(coord[n][0] - l[0]) + abs(coord[n][1] - l[1])
#             rd = abs(coord[n][0] - r[0]) + abs(coord[n][1] - r[1])
#
#             if ld == rd:
#                 if hand == 'left':
#                     answer += 'L'
#                     l = coord[n]
#                 else:
#                     answer += "R"
#                     r = coord[n]
#             elif ld > rd:
#                 answer += 'R'
#                 r = coord[n]
#             else:
#                 answer += 'L'
#                 l = coord[n]
#     return answer
#
# number = [1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5]
# hand = "R"
#
# print(solution(number,hand))







# a = 'Hello Python'
# print(a.count('o'))#해당 문자가 몇개 존재하는지를 반환
# print(a.find('l'))# l이라는 문자가 처음 나오는 인덱스 번호 반환 단, 없는 문자응 찾을 경우 -1 반환
# print(a.index('l'))# l이라는 문자가 처음 나오는 인덱스 번호 반환 단, 없는 문자를 찾는 경우 에러 발생
# print(a.replace('py','my'))# old문자를 new문자로 바꾸어준다.
# print(a.split())#괄호 안에 있는 문자를 기준으로 문자열을 나누어준다.단 괄호안에 아무것도 쓰지 않을 경우 공백을 기준으로 나누어준다.
# print(a.upper())#소문자를 대문자로
# print(a.lower())# 대문자를 소문자로
# print(','.join(a)) #인덱스 번호 사이사이에 해당 문자를 집어넣어준다.
# print(a.capitalize())#0번째 문자가 대문자로 변경된다.
# print(a.startswith('el')) #해당 문자로 시작하는지를 물어본다. True/False
# print(a.endswith('ton')) # 해당 문자로 끝나는지를 물어본다. True/ False
# print(a.is~)# is로 시작하는 함수들은 물어보는 함수 = True/ False를 반환
# print(a.isalnum()) # a라는 문자가 알파벳 또는 숫자인지를 물어본다.
# a = '123'
# print(a.isalpha()) # a라는 문자가 알파벳인지를 물어본다.
# print(a.isdigit()) #a 라는 문자가 숫자로 이루어져 있는지 물어본다.



